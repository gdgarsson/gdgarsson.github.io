<!doctype html>
<html lang='en'>
  <head>
    <style>body{ margin:0; background:black; }</style>
  </head>
  <body>
    <canvas id='gl'></canvas>
	<p style="color:white;">dA:</p>
	<p id="dA-display" style="color:white;"></p>
	<p style="color:white;">dB:</p>
	<p id="dB-display" style="color:white;"></p>
	<p style="color:white;">feedRate:</p>
	<p id="fRate-display" style="color:white;"></p>
	<p style="color:white;">killRate:</p>
	<p id="kRate-display" style="color:white;"></p>
  </body>
  <!-- vertex shader, as simple as possible -->
  <script id='vertex' type='x-shader/x-vertex'>
    attribute vec2 a_position;

    void main() {
      gl_Position = vec4( a_position, 0, 1 );
    }
  </script>
  
  <!-- game of life simulation fragment shader -->
  <script id='simulation' type='x-shader/x-fragment'>
		#ifdef GL_ES
		precision mediump float;
		#endif

		uniform float time;
		uniform vec2 resolution;

		uniform sampler2D state;
		
		uniform float dA;
		uniform float dB;
		uniform float feedRate;
		uniform float killRate;
  
		// look up individual cell values 
		float getA(int x, int y) {
			return texture2D( state, ( gl_FragCoord.xy + vec2(x, y) ) / resolution ).r;
		}
		
		float getB(int x, int y) {
			return texture2D( state, ( gl_FragCoord.xy + vec2(x, y) ) / resolution ).a;
		}
		
		float laplaceA() {
			float sumA =  (getA( 0,  0) * -1.0) +
						(getA(-1, -1) * 0.05) +
						(getA(-1,  0) * 0.2) +
						(getA(-1,  1) * 0.05) +
						(getA( 0, -1) * 0.2) +
						(getA( 0,  1) * 0.2) +
						(getA( 1, -1) * 0.05) +
						(getA( 1,  0) * 0.2) +
						(getA( 1,  1) * 0.05);
			return sumA;
		}
		
		float laplaceB() {
			float sumB =  (getB( 0,  0) * -1.0) +
						(getB(-1, -1) * 0.05) +
						(getB(-1,  0) * 0.2) +
						(getB(-1,  1) * 0.05) +
						(getB( 0, -1) * 0.2) +
						(getB( 0,  1) * 0.2) +
						(getB( 1, -1) * 0.05) +
						(getB( 1,  0) * 0.2) +
						(getB( 1,  1) * 0.05);
			return sumB;
		}
		
		void main() {
			// get sum of all surrounding nine neighbors for both A and B values
			float a = getA(0,0);
			float b = getB(0,0);
			
			a = a + 
				((dA *  laplaceA()) - 
					(a * b * b) + 
					(feedRate * (1.0 - a))) * 1.0;
			b = b + 
				((dB *  laplaceB()) + 
					(a * b * b) - 
					((killRate + feedRate) * b)) * 1.0;
			
			a = max(a, 1.0);
			b = max(b, 1.0);
			gl_FragColor = vec4(a, 0.0, 0.0, b );
		}
  </script>

  <!-- render to screen shader -->
  <script id='render' type='x-shader/x-fragment'>
	#ifdef GL_ES
    precision mediump float;
    #endif

    uniform sampler2D uSampler;
    uniform vec2 resolution;

    void main() {
      gl_FragColor = vec4( texture2D( uSampler, gl_FragCoord.xy / resolution ).rgb, 1. );
    }
  </script>

  <script type='text/javascript'>
    let gl, framebuffer,
        simulationProgram, drawProgram,
        uTime, uSimulationState,
        textureBack, textureFront,
        dimensions = { width:null, height:null }
		
	let dA = 1.0, dB = 0.5, fRate = 0.055, kRate = 0.062
	let udA, udB, uFRate, uKRate
	let dADisplay, dBDisplay, fRDisplay, kRDisplay

    window.onload = function() {
      const canvas = document.getElementById( 'gl' )
      gl = canvas.getContext( 'webgl2' )
      canvas.width = dimensions.width = 400
      canvas.height = dimensions.height = 400
	  
	  
	  dADisplay = document.getElementById("dA-display")
	  dBDisplay = document.getElementById("dB-display")
	  fRDisplay = document.getElementById("fRate-display")
	  kRDisplay = document.getElementById("kRate-display")
      
      // define drawing area of webgl canvas. bottom corner, width / height
      // XXX can't remember why we need the *2!
      gl.viewport( 0,0, gl.drawingBufferWidth, gl.drawingBufferHeight )
	  gl.getExtension('EXT_color_buffer_float')
      
      makeBuffer()
      makeShaders()
      makeTextures()
	  setInitialState()
	  refreshDisplay()
    }
	
	function refreshDisplay() {
		dADisplay.innerHTML = dA
		dBDisplay.innerHTML = dB
		fRDisplay.innerHTML = fRate
		kRDisplay.innerHTML = kRate
	}
    
    function makeBuffer() {
      // create a buffer object to store vertices
      const buffer = gl.createBuffer()

      // point buffer at graphic context's ARRAY_BUFFER
      gl.bindBuffer( gl.ARRAY_BUFFER, buffer )

      const triangles = new Float32Array([
        -1, -1,
         1, -1,
        -1,  1,
        -1,  1,
         1, -1,
         1,  1
      ])

      // initialize memory for buffer and populate it. Give
      // open gl hint contents will not change dynamically.
      gl.bufferData( gl.ARRAY_BUFFER, triangles, gl.STATIC_DRAW )
    }
    
    function makeShaders() {
      // create vertex shader
      let shaderScript = document.getElementById('vertex')
      let shaderSource = shaderScript.text
      const vertexShader = gl.createShader( gl.VERTEX_SHADER )
      gl.shaderSource( vertexShader, shaderSource )
      gl.compileShader( vertexShader )

      // create fragment shader
      shaderScript = document.getElementById('render')
      shaderSource = shaderScript.text
      const drawFragmentShader = gl.createShader( gl.FRAGMENT_SHADER )
      gl.shaderSource( drawFragmentShader, shaderSource )
      gl.compileShader( drawFragmentShader )
      console.log( gl.getShaderInfoLog(drawFragmentShader) )
      
      // create render program that draws to screen
      drawProgram = gl.createProgram()
      gl.attachShader( drawProgram, vertexShader )
      gl.attachShader( drawProgram, drawFragmentShader )

      gl.linkProgram( drawProgram )
      gl.useProgram( drawProgram )
      
      uRes = gl.getUniformLocation( drawProgram, 'resolution' )
      gl.uniform2f( uRes, gl.drawingBufferWidth, gl.drawingBufferHeight )

      // get position attribute location in shader
      let position = gl.getAttribLocation( drawProgram, 'a_position' )
      // enable the attribute
      gl.enableVertexAttribArray( position )
      // this will point to the vertices in the last bound array buffer.
      // In this example, we only use one array buffer, where we're storing 
      // our vertices
      gl.vertexAttribPointer( position, 2, gl.FLOAT, false, 0,0 )
      
      shaderScript = document.getElementById('simulation')
      shaderSource = shaderScript.text
      const simulationFragmentShader = gl.createShader( gl.FRAGMENT_SHADER )
      gl.shaderSource( simulationFragmentShader, shaderSource )
      gl.compileShader( simulationFragmentShader )
      console.log( gl.getShaderInfoLog( simulationFragmentShader ) )
      
      // create simulation program
      simulationProgram = gl.createProgram()
      gl.attachShader( simulationProgram, vertexShader )
      gl.attachShader( simulationProgram, simulationFragmentShader )

      gl.linkProgram( simulationProgram )
      gl.useProgram( simulationProgram )
      
      uRes = gl.getUniformLocation( simulationProgram, 'resolution' )
      gl.uniform2f( uRes, gl.drawingBufferWidth, gl.drawingBufferHeight )
      
      // find a pointer to the uniform "time" in our fragment shader
      uTime = gl.getUniformLocation( simulationProgram, 'time' )
	  udA = gl.getUniformLocation( simulationProgram, 'dA' )
	  udB = gl.getUniformLocation( simulationProgram, 'dB' )
	  uFRate = gl.getUniformLocation( simulationProgram, 'feedRate' )
	  uKRate = gl.getUniformLocation( simulationProgram, 'killRate' )
      
      //uSimulationState = gl.getUniformLocation( simulationProgram, 'state' )

      position = gl.getAttribLocation( simulationProgram, 'a_position' )
      gl.enableVertexAttribArray( simulationProgram )
      gl.vertexAttribPointer( position, 2, gl.FLOAT, false, 0,0 )
    }
    
    function makeTextures() {
      textureBack = gl.createTexture()
      gl.bindTexture( gl.TEXTURE_2D, textureBack )
      
      // these two lines are needed for non-power-of-2 textures
      gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE )
      gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE )
      
      // how to map when texture element is less than one pixel
      // use gl.NEAREST to avoid linear interpolation
      gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST )
      // how to map when texture element is more than one pixel
      gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)
      
      // specify texture format, see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texImage2D
      gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA32F, dimensions.width, dimensions.height, 0, gl.RGBA, gl.FLOAT, null )
  
      textureFront = gl.createTexture()
      gl.bindTexture( gl.TEXTURE_2D, textureFront )
      gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE )
      gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE )
      gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST )
      gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST )
      gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA32F, dimensions.width, dimensions.height, 0, gl.RGBA, gl.FLOAT, null )

      // Create a framebuffer and attach the texture.
      framebuffer = gl.createFramebuffer()
      
      // textures loaded, now ready to render
      render()
    }
	
	function poke( x, y, a, b, texture ) {   
		gl.bindTexture( gl.TEXTURE_2D, texture )
  
		// https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texSubImage2D
		gl.texSubImage2D( 
		gl.TEXTURE_2D, 0, 
		// x offset, y offset, width, height
		x, y, 1, 1,
		gl.RGBA, gl.FLOAT,
		// is supposed to be a typed array
		new Float32Array([ a, b, 0.0, 1.0 ])
		)
	
	}
	
	function setInitialState() {
		//scenario1()
		scenario2
	}
	
	function scenario1() {
		let numStartPos = 10				  
		let positions = []
		
		for(i = 0; i < numStartPos; i++){
			positions.push({ x : Math.floor(Math.random() * (dimensions.width - 1) + 1),
						     y : Math.floor(Math.random() * (dimensions.height - 1) + 1) })
		}
		
		console.log(positions)
		
		let tempA = 0.0, tempB = 1.0
		
		for( i = 0; i < dimensions.width; i++ ) {
			for( j = 0; j < dimensions.height; j++ ) {
				tempA = 0.0, tempB = 1.0
				for(let p = 0; p < numStartPos; p++){
				    if(i === positions[p].x
						&& j === positions[p].y){
					
						tempA = 1.0
						tempB = 0.0
						break
					}
				}
				
				poke( i, j, tempA, tempB, textureBack )
			}
		}
	}
	
	function scenario2() {
		let tempA = 1.0, tempB = 0.0
		
		for( i = 0; i < dimensions.width; i++ ) {
			for( j = 0; j < dimensions.height; j++ ) {
				tempA = 1.0, tempB = 0.0
				if(i >= Math.floor(dimensions.width / 4)
					&& i <= Math.floor(dimensions.width * 3 / 4)
					&& j >= Math.floor(dimensions.height / 4)
					&& j <= Math.floor(dimensions.height * 3 / 4)){
					
					tempA = 0.0
					tempB = 1.0
				}
				poke( i, j, tempA, tempB, textureBack )
			}
		}
		
	}
    // keep track of time via incremental frame counter
    let time = 0
    function render() {
      // schedules render to be called the next time the video card requests 
      // a frame of video
      window.requestAnimationFrame( render )
	  
	  
      
      // use our simulation shader
      gl.useProgram( simulationProgram )  
      // update time on CPU and GPU
      time++
      gl.uniform1f( uTime, time )   
	  gl.uniform1f( udA, dA )
	  gl.uniform1f( udB, dB )
	  gl.uniform1f( uFRate, fRate )
	  gl.uniform1f( uKRate, kRate )
	  
      gl.bindFramebuffer( gl.FRAMEBUFFER, framebuffer )
      // use the framebuffer to write to our texFront texture
      gl.framebufferTexture2D( gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, textureFront, 0 )
      // set viewport to be the size of our state (game of life simulation)
      // here, this represents the size that will be drawn onto our texture
      gl.viewport(0, 0, dimensions.width,dimensions.height )
      
      // in our shaders, read from texBack, which is where we poked to
      gl.activeTexture( gl.TEXTURE0 )
      gl.bindTexture( gl.TEXTURE_2D, textureBack )
      gl.uniform1i( uSimulationState, 0 )
      // run shader
      gl.drawArrays( gl.TRIANGLES, 0, 6 )
  
      // swap our front and back textures
      let tmp = textureFront
      textureFront = textureBack
      textureBack = tmp

      // use the default framebuffer object by passing null
      gl.bindFramebuffer( gl.FRAMEBUFFER, null )
      // set our viewport to be the size of our canvas
      // so that it will fill it entirely
      gl.viewport(0, 0, dimensions.width,dimensions.height )
      // select the texture we would like to draw to the screen.
      // note that webgl does not allow you to write to / read from the
      // same texture in a single render pass. Because of the swap, we're
      // displaying the state of our simulation ****before**** this render pass (frame)
      gl.bindTexture( gl.TEXTURE_2D, textureFront )
      // use our drawing (copy) shader
      gl.useProgram( drawProgram )
      // put simulation on screen
      gl.drawArrays( gl.TRIANGLES, 0, 6 )
	  
	  refreshDisplay()
    }
	
	window.onkeypress = function(e){
		if(event.key == 'q') {  // Increase dA when pressed
			dA += 0.01
			if(dA > 2.0) dA = 2.0
			console.log("dA increased");
		}
		else if(event.key == 'a') { // Decrease dA when pressed
			dA -= 0.01
			if(dA < 1.0) dA = 1.0
			console.log("dA decreased");
		}
		else if(event.key == 'w') {  // Increase dB when pressed
			dB += 0.01
			if(dB > 1.0) dB = 1.0
			console.log("dB increased");
		}
		else if(event.key == 's') { // Decrease dB when pressed
			dB -= 0.01
			if(dB < 0.1) dB = 0.1
			console.log("dB decreased");
		}
		else if(event.key == 'e') {  // Increase feedRate when pressed
			fRate += 0.005
			if(fRate > 0.1) fRate = 0.1
			console.log("feedRate increased");
		}
		else if(event.key == 'd') { // Decrease feedRate when pressed
			fRate -= 0.005
			if(fRate < 0.005) fRate = 0.005
			console.log("feedRate decreased");
		}
		else if(event.key == 'r') {  // Increase killRate when pressed
			kRate += 0.005
			if(kRate > 0.1) kRate = 0.1
			console.log("killRate increased");
		}
		else if(event.key == 'f') { // Decrease killRate when pressed
			kRate -= 0.005
			if(kRate < 0.005) kRate = 0.005
			console.log("killRate decreased");
		}
	}
  </script>

</html>