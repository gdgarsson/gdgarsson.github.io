<!doctype html>
<html lang='en'>
  <head>
    <style>body{ margin:0; background:black }</style>
  </head>
  <body>
    <canvas id='gl'></canvas>
  </body>
  <!-- vertex shader, as simple as possible -->
  <script id='vertex' type='x-shader/x-vertex'>
    attribute vec2 a_position;

    void main() {
      gl_Position = vec4( a_position, 0, 1 );
    }
  </script>

  <!-- fragment shader -->
  <script id='fragment' type='x-shader/x-fragment'>
    #ifdef GL_ES
    precision mediump float;
    #endif

	#define PI 3.14159265359
	
    uniform float time;
    // contains resolution of our canvas, in pixels
    uniform vec2 resolution;
	
	uniform bool enableBoxTrans;
	uniform bool enableBoxRotate;
	uniform bool boxRotateLeft; // True if box rotates counter-clockwise
	
	uniform bool invertCameraColor;

    // uniform pointing to our opengl texture
    uniform sampler2D uSampler;
	
	float circle(in vec2 pos, in float radius){
		vec2 dist = pos-vec2(0.5);
		return 1.-smoothstep(radius-(radius*0.01),
                         radius+(radius*0.01),
                         dot(dist,dist)*4.0);
	}
	
	float box(in vec2 pos, in vec2 size){
		size = vec2(0.5) - size*0.5;
		vec2 uv = smoothstep(size,
                        size+vec2(0.001),
                        pos);
		uv *= smoothstep(size,
                    size+vec2(0.001),
                    vec2(1.0)-pos);
		return uv.x*uv.y;
	}
	
	mat2 rotate2d(float _angle){
		return mat2(cos(_angle),-sin(_angle),
                sin(_angle),cos(_angle));
	}
	
	mat2 scale(vec2 _scale){
		return mat2(_scale.x,0.0,
                0.0,_scale.y);
	}
	
	vec2 skew (vec2 st) {
		vec2 r = vec2(0.0);
		r.x = 1.1547*st.x;
		r.y = st.y+0.5*r.x;
		return r;
	}
	
	vec3 simplexGrid (vec2 st) {
    vec3 xyz = vec3(0.0);

    vec2 p = fract(skew(st * time));
		if (p.x > p.y) {
			xyz.xy = 1.0-vec2(p.x,p.y-p.x);
			xyz.z = p.y;
		} else {
			xyz.yz = 1.0-vec2(p.x-p.y,p.y);
			xyz.x = p.x;
		}

		return fract(xyz);
	}

    void main() {
      // gl_FragCoord is measured in pixels, but texture2D expects
      // normalized coordinates (between 0â€“1). If we divide gl_FragCoord
      // by our resolution, we'll get a normalized position value
      vec2 pos = gl_FragCoord.xy / resolution;
	  
	  vec3 bgc = vec3(vec2(pos), 0.0); // Background Color
	  vec3 color = bgc;
	  
	  vec2 translate = vec2(0.0);
	  pos += translate;
      
	  vec2 boxOrient = vec2(pos);
	  vec2 boxTranslate = vec2(0.0) * .2;
	  vec2 boxRotate = vec2(1.0);
	  if(enableBoxRotate) {
		boxOrient -= vec2(.5);
		if(boxRotateLeft) {
			boxRotate = rotate2d(time * -0.02) * boxOrient;
		}
		else {
			boxRotate = rotate2d(time * .02) * boxOrient;
		}
		boxOrient += boxRotate;
		boxOrient += vec2(.5);
	  }
	  if(enableBoxTrans) {
		boxTranslate = vec2(sin(time * 0.02), cos(time * 0.02)) * .2;
		boxOrient += boxTranslate;
	  }
	  float boxHit = box(boxOrient, vec2(0.25));
	  vec3 boxCol = vec3(box(boxOrient, vec2(0.25)));
	  boxCol *= texture2D(uSampler, pos).rgb;
	  
      //vec3 color = texture2D( uSampler, pos ).rgb;
	  if(boxHit > 0.0){
		if(invertCameraColor) {
			color = vec3(1.0 - boxCol);
		}
		else {
			color = boxCol;
		}
	  }
	  else {
		pos *= 10.0;
		vec3 grid = simplexGrid(pos);
		grid.r *= sin(time * 0.02);
		grid.g *= cos(time * 0.02);
		grid.b *= tan(time * 0.02);
		color = grid;
	  }
	  
      gl_FragColor = vec4( vec3( color ), 1. );
    }
  </script>

  <script type='text/javascript'>
    // kinda global variables... upvalues to each closure of each function in this script tag
    let gl, uTime, uRes, uEnableBoxTranslate, drawProgram, videoTexture
	let uEnableBoxRotate, uBoxRotateLeft, uInvertCC
	let enableBoxTranslate, enableBoxRotation, boxRotateL, invertCC = false;

    const size = 768
    window.onload = function() {
      const canvas = document.getElementById( 'gl' )
      gl = canvas.getContext( 'webgl' )
      canvas.width = canvas.height = size
      
      // define drawing area of webgl canvas. bottom corner, width / height
      // XXX can't remember why we need the *2!
      gl.viewport( 0,0,gl.drawingBufferWidth*2, gl.drawingBufferHeight*2 )

      // create a buffer object to store vertices
      const buffer = gl.createBuffer()

      // point buffer at graphic context's ARRAY_BUFFER
      gl.bindBuffer( gl.ARRAY_BUFFER, buffer )

      // create two triangles (three vertices each) that fill entire canvas,
      // with coordinates measured from -1 to 1.
      const triangles = new Float32Array([
        -1, -1,
         1, -1,
        -1,  1,
        -1,  1,
         1, -1,
         1,  1
      ])

      // initialize memory for buffer and populate it. Give
      // open gl hint contents will not change dynamically.
      gl.bufferData( gl.ARRAY_BUFFER, triangles, gl.STATIC_DRAW )

      // create vertex shader
      let shaderScript = document.getElementById('vertex')
      let shaderSource = shaderScript.text
      // create shader object
      const vertexShader = gl.createShader( gl.VERTEX_SHADER )
      // define source text for our shader
      gl.shaderSource( vertexShader, shaderSource )
      // compile shader
      gl.compileShader( vertexShader )

      // create fragment shader
      shaderScript = document.getElementById('fragment')
      shaderSource = shaderScript.text
      const fragmentShader = gl.createShader( gl.FRAGMENT_SHADER )
      gl.shaderSource( fragmentShader, shaderSource )
      gl.compileShader( fragmentShader )

      // create shader program, which links vertex and fragment shaders
      drawProgram = gl.createProgram()
      gl.attachShader( drawProgram, vertexShader )
      gl.attachShader( drawProgram, fragmentShader )
      // report any errors in the fragment shader
      console.log( gl.getShaderInfoLog( fragmentShader ) )
      gl.linkProgram( drawProgram )
      gl.useProgram( drawProgram )
      
      /* ALL ATTRIBUTE/UNIFORM INITIALIZATION MUST COME AFTER 
      CREATING/LINKING/USING THE SHADER PROGAM */
      
      // find a pointer to the uniform "time" in our fragment shader
      uTime = gl.getUniformLocation( drawProgram, 'time' ) 
      uRes = gl.getUniformLocation( drawProgram, 'resolution' )
	  uEnableBoxTranslate = gl.getUniformLocation( drawProgram, 'enableBoxTrans')
	  uEnableBoxRotate = gl.getUniformLocation( drawProgram, 'enableBoxRotate')
	  uBoxRotateLeft = gl.getUniformLocation( drawProgram, 'boxRotateLeft')
	  uInvertCC = gl.getUniformLocation( drawProgram, 'invertCameraColor')
      // send uniform values for uRes up to gpu
      gl.uniform2f( uRes, size, size )

      // get position attribute location in shader
      var position = gl.getAttribLocation( drawProgram, 'a_position' )
      // enable the attribute
      gl.enableVertexAttribArray( position )
      // this will point to the vertices in the last bound array buffer.
      // In this example, we only use one array buffer, where we're storing 
      // our vertices
      gl.vertexAttribPointer( position, 2, gl.FLOAT, false, 0,0 )
      
      video = getVideo()
    }
    
    function getVideo() {
      const video = document.createElement('video');

      // request video stream
      navigator.mediaDevices.getUserMedia({
        video:true
      }).then( stream => { 
        // this block happens when the video stream has been successfully requested
        video.srcObject = stream
        video.play()
        makeTexture()
      }) 
        
      return video
    }
    
    function makeTexture() {
      // create an OpenGL texture object
      videoTexture = gl.createTexture()
      
      // this tells OpenGL which texture object to use for subsequent operations
      gl.bindTexture( gl.TEXTURE_2D, videoTexture )
        
      // since canvas draws from the top and shaders draw from the bottom, we
      // have to flip our canvas when using it as a shader.
      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);

      // how to map when texture element is more than one pixel
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR )
      // how to map when texture element is less than one pixel
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR )
      
      // you must have these properties defined for the video texture to
      // work correctly at non-power-of-2 sizes
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE )
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE )
      
      render()
    }

    // keep track of time via incremental frame counter
    let time = 0
    function render() {
      // schedules render to be called the next time the video card requests 
      // a frame of video
      window.requestAnimationFrame( render )
      
      // update time on CPU and GPU
      time++
      gl.uniform1f( uTime, time )
	  gl.uniform1i( uEnableBoxTranslate, enableBoxTranslate)
	  gl.uniform1i( uEnableBoxRotate, enableBoxRotation);
	  gl.uniform1i( uBoxRotateLeft, boxRotateL);
	  gl.uniform1i( uInvertCC, invertCC);
         
      gl.texImage2D( 
        gl.TEXTURE_2D,    // target: you will always want gl.TEXTURE_2D
        0,                // level of detail: 0 is the base
        gl.RGBA, gl.RGBA, // color formats
        gl.UNSIGNED_BYTE, // type: the type of texture data; 0-255
        video             // pixel source: could also be video or image
      )
      
      // draw triangles using the array buffer from index 0 to 6 (6 is count)
      gl.drawArrays( gl.TRIANGLES, 0, 6 )
    }
	
	window.onkeypress = function(e){
		if(event.key == 't') {  // Set the box's movement effect to Clockwise when t is pressed
			enableBoxTranslate = !enableBoxTranslate;
			if(enableBoxTranslate) console.log("Box Translation Enabled")
			else console.log("Box Translation disabled");
		}
		else if(event.key == 'r') { // Toggle box rotation effect when r is pressed
			enableBoxRotation = !enableBoxRotation;
			if(enableBoxRotation) console.log("Box Rotation Enabled")
			else console.log("Box Rotation disabled");
		}
		else if(event.key == 'a') { // Set the box's movement+rotation direction to Counter-Clockwise when a is pressed
			boxRotateL = false;
			if(!boxRotateL) console.log("Box Rotation Direction set to Counter-Clockwise");
		}
		else if(event.key == 'd') { // Set the box's movement+rotation direction to Clockwise when d is pressed 
			boxRotateL = true;
			if(boxRotateL) console.log("Box Rotation Direction set to Clockwise")
		}
		else if(event.key == 'i') { // Invert camera color when i is pressed
			invertCC = !invertCC;
			if(invertCC) console.log("Camera Colors inverted");
			else console.log("Camera Colors returned to normal");
		}
	}
  </script>

</html>